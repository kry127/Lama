import List;

(*
 The syntax for introducing local variables:
  `local <variable_name> = <expr>`
 We would like to add optional type annotations like this:
  `local <variable_name> : <type_annotation> = <expr>`
*)


local x :: ? = 1; -- Type(x)=?, no inference is performing when type specified explicitly, but conformity is checked
local y = 1; -- when no explicit type specified, the type will be inferred implicitly (here y :: Int)
local z  :: Int = 1; -- Type(y)=int
public w :: Str = "kek"; -- Type(y)=string, but public

local a = 3, b = 4; -- we can have multiple definitions!
local p1left :: Int = 0, p1right        = "hello";
local p2left        = 0, p2right :: Str = "hello";
local p3left :: Int = 0, p3right :: Str = "hello";

local promise :: Int -> Str; -- just type declaration (should fail, honestly!)